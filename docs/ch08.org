*  Chapter 8 Notes
**  Item 49: Check parameters for validity
   - Find errors as soon as possible after they occur. i.e. check method parameters at the
     beginning of the method body.
   * Document your assertions with =throws= clauses, but don't bother if the classes you're
     using already do that.
   * The [[https://docs.oracle.com/javase/9/docs/api/java/util/Objects.html#requireNonNull-T-java.lang.String-][Objects.requireNonNull()]] method is useful for checking nullity.

     #+BEGIN_SRC java
       public class Foo {
           private final Bar bar;

           public Foo(Bar bar) {
               this.bar = Objects.requireNonNull(bar, "bar must not be null");
           }
       }
     #+END_SRC

     If =bar= is =null= the assignment of the member variable will throw a
     =NullPointerException=.
   * Use =assert= to check parameters for non-public methods since you have control over the
     method caller.
   * Don't check parameters if it is computationally expensive or you're doing it
     anyway. Example: a check that every item in an input list is an even integer.

     #+BEGIN_SRC java
       public boolean allEven(List<Integer> list) {
           //check for non-null, but not if every item in list is even
           //since that's what I'm already calculating.
       }
     #+END_SRC

   * Implicit validity is when an invalid parameter already throws an exception. It might
     not throw the proper exception though in which case you should an exception
     translation (catch one, throw another).

   * Try to handle the widest case of validity. Postel's "Be liberal in what you accept,
     conservative in what you return."

**  Item 50: Make defensive copies when needed
   * Write classes that are well behaved even when they are mistreated.
   * If your constructor takes mutable type parameters, you need to defensive copy them.
   * Make the defensive copies before you do validity checks.
   * If your member variables are of mutable types, you need to defensive copy accessors.
   * Always make a defensive copy of an internally stored array (or an array
     view via =clone()=). Non-zero sized arrays are always mutable.
   * Prefer immutable types for your member variables. That will make defensive copying
     unnecessary.
**  Item 51: Design method signatures carefully
   * This item is actually 5 items
     - Name your methods carefully
     - Don't use too many
     - Keep parameter lists small (4 or fewer) and avoid params of the same type.
     - Use interfaces for parameter types. It allows more flexibility for the callers.
     - Don't use boolean parameters. Use enums instead. (Is there ***ever*** a reason to use
       boolean parameters?)
**  Item 52: Use overloading judiciously
   * Selection among overloaded methods is static, selection among overridden methods is
     dynamic.
   * There's a lot I don't understand in here. Need to reread more carefully.
**  Item 53: Use varargs judiciously
   * Varargs allocate an array for every invocation. If you know that most of the time you
     won't need more than a few params consider an overridden set of methods

     #+BEGIN_SRC java
       public void foo();
       public void foo(int x);
       public void foo(int x, int y);
       public void foo(int x, int y, int z);
       public void foo(int x, int y, int z, int... rest);

     #+END_SRC

     This will mean you only do the array allocation when you call =foo= with 4 or more args.
**  Item 54: Return empty collections or arrays, not nulls
**  Item 55: Return optionals judiciously
**  Item 56: Write doc comments for all exposed API elements
